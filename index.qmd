---
title: "Final Project"
---

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.

## Chapter 1

---
title: "Penguins EDA"
format:
  html:
    code-fold: true
---

## Penguin Size and Mass by Sex and Species

```{r}
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(reticulate)
project_dir <- getwd() # Or set this to a specific directory if needed
venv_path <- file.path(project_dir, ".venv")
python_path <- file.path(venv_path, "bin", "python")

Sys.setenv(RETICULATE_PYTHON = python_path)

use_virtualenv(venv_path, required = TRUE)

df <- palmerpenguins::penguins
```

```{r}
df %>%
  group_by(species, sex) %>%
  summarise(
    across(
      where(is.numeric), 
      \(x) mean(x, na.rm = TRUE)
      )
    ) %>%
  knitr::kable()
```

## Penguin Size vs Mass by Species

```{r}
df %>%
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  geom_point() + 
  geom_smooth(method = "lm")
```

---
title: "Model"
format:
  html:
    code-fold: true
---

```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```

## Get Data

```{python}
df = penguins.load_penguins().dropna()

df.head(3)
```

## Define Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

## Chapter 2

```{python}
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

```{python}
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read=True)
p = vetiver_pin_write(b,v, versioned=True)
```

```{python}
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
```

## Chapter 6

```{python}
import os
 
# Path to the file you expect `prepare_docker()` to create
file_path = 'app.py'
file_path2= 'Dockerfile'
 
# Check if the file exists and delete it if it does
if os.path.exists(file_path):
    os.remove(file_path)
if os.path.exists(file_path2):
    os.remove(file_path2)
# Now call prepare_docker() without worrying about the file existing
from vetiver import prepare_docker
prepare_docker(b,'penguin_model')
```

## Chapter 3

#```{python}
#import duckdb
#from palmerpenguins import load_penguins

#con = duckdb.connect('my-db.duckdb')
#df = load_penguins()
#con.execute('DROP TABLE IF EXISTS penguins')
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
#```

#```{python}
#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
#```

#```{python}
#import requests

#req_data = {
#  "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json=[req_data])
#res = req.json().get('predict')[0]
#```

```{python}
from shiny import App, render, ui, reactive
import requests

api_url = 'http://127.0.0.1:8080/predict'

app_ui = ui.page_fluid(
    ui.panel_title("Penguin Mass Predictor"), 
    ui.layout_sidebar(
        ui.panel_sidebar(
            [ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
            ui.input_select("sex", "Sex", ["Male", "Female"]),
            ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
            ui.input_action_button("predict", "Predict")]
        ),
        ui.panel_main(
            ui.h2("Penguin Parameters"),
            ui.output_text_verbatim("vals_out"),
            ui.h2("Predicted Penguin Mass (g)"), 
            ui.output_text("pred_out")
        )
    )   
)

def server(input, output, session):
    @reactive.Calc
    def vals():
        d = {
            "bill_length_mm" : input.bill_length(),
            "sex_male" : input.sex() == "Male",
            "species_Gentoo" : input.species() == "Gentoo", 
            "species_Chinstrap" : input.species() == "Chinstrap"

        }
        return d
    
    @reactive.Calc
    @reactive.event(input.predict)
    def pred():
        r = requests.post(api_url, json = [vals()])
        return r.json().get('predict')[0]

    @output
    @render.text
    def vals_out():
        return f"{vals()}"

    @output
    @render.text
    def pred_out():
        return f"{round(pred())}"

app = App(app_ui, server)
```

## Chapter 4

```{python}
import logging

logging.basicConfig(
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)
```

```{python}
def server(input, output, session):
    logging.info("App start")

    @reactive.Calc
    def vals():
        d = {
            "bill_length_mm" : input.bill_length(),
            "sex_male" : input.sex() == "Male",
            "species_Gentoo" : input.species() == "Gentoo", 
            "species_Chinstrap" : input.species() == "Chinstrap"

        }
        return d
    
    @reactive.Calc
    @reactive.event(input.predict)
    def pred():
        logging.info("Request Made")
        r = requests.post(api_url, json = [vals()])
        logging.info("Request Returned")

        if r.status_code != 200:
            logging.error("HTTP error returned")

        return r.json().get('predict')[0]

    @output
    @render.text
    def vals_out():
        return f"{vals()}"

    @output
    @render.text
    def pred_out():
        return f"{round(pred())}"
```
