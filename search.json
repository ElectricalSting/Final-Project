[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Model",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#chapter-1",
    "href": "index.html#chapter-1",
    "title": "Model",
    "section": "Chapter 1",
    "text": "Chapter 1"
  },
  {
    "objectID": "index.html#penguin-size-and-mass-by-sex-and-species",
    "href": "index.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Model",
    "section": "Penguin Size and Mass by Sex and Species",
    "text": "Penguin Size and Mass by Sex and Species\n\n\nCode\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(reticulate)\nproject_dir &lt;- getwd() # Or set this to a specific directory if needed\nvenv_path &lt;- file.path(project_dir, \".venv\")\npython_path &lt;- file.path(venv_path, \"bin\", \"python\")\n\nSys.setenv(RETICULATE_PYTHON = python_path)\n\nuse_virtualenv(venv_path, required = TRUE)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "index.html#penguin-size-vs-mass-by-species",
    "href": "index.html#penguin-size-vs-mass-by-species",
    "title": "Model",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "index.html#get-data",
    "href": "index.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "index.html#define-model-and-fit",
    "href": "index.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "index.html#get-some-information",
    "href": "index.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\n\n\nR^2 0.8555368759537614\n\n\nCode\nprint(f\"Intercept {model.intercept_}\")\n\n\nIntercept 2169.269720939392\n\n\nCode\nprint(f\"Columns {X.columns}\")\n\n\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n\n\nCode\nprint(f\"Coefficients {model.coef_}\")\n\n\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "index.html#chapter-2",
    "href": "index.html#chapter-2",
    "title": "Model",
    "section": "Chapter 2",
    "text": "Chapter 2\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nb = board_folder('data/model', allow_pickle_read=True)\np = vetiver_pin_write(b,v, versioned=True)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240310T184905Z-d3492\n\n\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype=True)"
  },
  {
    "objectID": "index.html#chapter-6",
    "href": "index.html#chapter-6",
    "title": "Model",
    "section": "Chapter 6",
    "text": "Chapter 6\n\n\nCode\nimport os\n \n# Path to the file you expect `prepare_docker()` to create\nfile_path = 'app.py'\nfile_path2= 'Dockerfile'\n \n# Check if the file exists and delete it if it does\nif os.path.exists(file_path):\n    os.remove(file_path)\nif os.path.exists(file_path2):\n    os.remove(file_path2)\n# Now call prepare_docker() without worrying about the file existing\nfrom vetiver import prepare_docker\nprepare_docker(b,'penguin_model')\n\n\n/home/runner/work/Final-Project/Final-Project/.venv/lib/python3.9/site-packages/vetiver/attach_pkgs.py:77: UserWarning:\n\nrequired packages unknown for board protocol: ('file', 'local'), add to model's metadata to export"
  },
  {
    "objectID": "index.html#chapter-3",
    "href": "index.html#chapter-3",
    "title": "Model",
    "section": "Chapter 3",
    "text": "Chapter 3\n#```{python} #import duckdb #from palmerpenguins import load_penguins\n#con = duckdb.connect(‘my-db.duckdb’) #df = load_penguins() #con.execute(‘DROP TABLE IF EXISTS penguins’) #con.execute(‘CREATE TABLE penguins AS SELECT * FROM df’) #con.close() #```\n#{python} #con = duckdb.connect('my-db.duckdb') #df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna() #con.close() #\n#```{python} #import requests\n#req_data = { # “bill_length_mm”: 0, # “species_Chinstrap”: False, # “species_Gentoo”: False, # “sex_male”: False #} #req = requests.post(‘http://127.0.0.1:8080/predict’, json=[req_data]) #res = req.json().get(‘predict’)[0] #```\n\n\nCode\nfrom shiny import App, render, ui, reactive\nimport requests\n\napi_url = 'http://127.0.0.1:8080/predict'\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Penguin Mass Predictor\"), \n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            [ui.input_slider(\"bill_length\", \"Bill Length (mm)\", 30, 60, 45, step = 0.1),\n            ui.input_select(\"sex\", \"Sex\", [\"Male\", \"Female\"]),\n            ui.input_select(\"species\", \"Species\", [\"Adelie\", \"Chinstrap\", \"Gentoo\"]),\n            ui.input_action_button(\"predict\", \"Predict\")]\n        ),\n        ui.panel_main(\n            ui.h2(\"Penguin Parameters\"),\n            ui.output_text_verbatim(\"vals_out\"),\n            ui.h2(\"Predicted Penguin Mass (g)\"), \n            ui.output_text(\"pred_out\")\n        )\n    )   \n)\n\ndef server(input, output, session):\n    @reactive.Calc\n    def vals():\n        d = {\n            \"bill_length_mm\" : input.bill_length(),\n            \"sex_male\" : input.sex() == \"Male\",\n            \"species_Gentoo\" : input.species() == \"Gentoo\", \n            \"species_Chinstrap\" : input.species() == \"Chinstrap\"\n\n        }\n        return d\n    \n    @reactive.Calc\n    @reactive.event(input.predict)\n    def pred():\n        r = requests.post(api_url, json = [vals()])\n        return r.json().get('predict')[0]\n\n    @output\n    @render.text\n    def vals_out():\n        return f\"{vals()}\"\n\n    @output\n    @render.text\n    def pred_out():\n        return f\"{round(pred())}\"\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "index.html#chapter-4",
    "href": "index.html#chapter-4",
    "title": "Model",
    "section": "Chapter 4",
    "text": "Chapter 4\n\n\nCode\nimport logging\n\nlogging.basicConfig(\n    format='%(asctime)s - %(message)s',\n    level=logging.INFO\n)\n\n\n\n\nCode\ndef server(input, output, session):\n    logging.info(\"App start\")\n\n    @reactive.Calc\n    def vals():\n        d = {\n            \"bill_length_mm\" : input.bill_length(),\n            \"sex_male\" : input.sex() == \"Male\",\n            \"species_Gentoo\" : input.species() == \"Gentoo\", \n            \"species_Chinstrap\" : input.species() == \"Chinstrap\"\n\n        }\n        return d\n    \n    @reactive.Calc\n    @reactive.event(input.predict)\n    def pred():\n        logging.info(\"Request Made\")\n        r = requests.post(api_url, json = [vals()])\n        logging.info(\"Request Returned\")\n\n        if r.status_code != 200:\n            logging.error(\"HTTP error returned\")\n\n        return r.json().get('predict')[0]\n\n    @output\n    @render.text\n    def vals_out():\n        return f\"{vals()}\"\n\n    @output\n    @render.text\n    def pred_out():\n        return f\"{round(pred())}\""
  }
]